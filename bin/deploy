const { spawn, execSync } = require('child_process');
const { dirname } = require('path');
const { existsSync, readFileSync } = require('fs');

const environment = process.argv[2];
const projectDir = dirname(__dirname);
const configFile = `${projectDir}/infra/gcp/config.json`;

if (!existsSync(configFile)) {
  throw new Error(`config file does not exist in path: ${configPath}`);
}

/**
 * Utilities
 */

const execute = (command, args) => {
  const cmd = spawn(command, args);
  cmd.stdout.on('data', (data) => process.stdout.write(data));
  cmd.stderr.on('data', (data) => process.stderr.write(data));
  cmd.on('error', () => process.exit(1));
}

const authenticateDocker = (serviceAccount, serviceAccountKey) => {
  execute('gcloud', ['auth', 'activate-service-account', `${serviceAccount}`, `--key-file=${serviceAccountKey}`, '--quiet']);
  execute('gcloud', ['auth', 'configure-docker', 'us-docker.pkg.dev', '--quiet']);
}

const buildDockerImage = (image) => {
  execute('docker', ['build', '-t', image, '-f', 'DockerFile', '.']);
  execute('docker', ['push', image]);
}

const terraformApply = (dir, image) => {
  execute('terraform', [`-chdir=${dir}`, 'init']);
  execute('terraform', [`-chdir=${dir}`, 'apply', '-var', `app_image=${image}`, '-auto-approve']);
}

/**
 * Execution
 */

const config = JSON.parse(readFileSync(configFile))[environment];
const commitHash = execSync('git rev-parse --short HEAD').toString();
const image = `us-docker.pkg.dev/outside-playground-300111/cloudrun-deployment/api:${commitHash}`;
const serviceAccountKeyFile = `${projectDir}/infra/gcp/credentials/${config['serviceAccountKey']}`;
const terraformDir = `${projectDir}/infra/gcp/terraform`;

authenticateDocker(config['serviceAccount'], serviceAccountKeyFile);
buildDockerImage(image);
terraformApply(terraformDir, image);
